underscore.js
	Para chequear tipos y más cosas...
	Tiene montones de funciones que el JS no tiene por defecto

typeof y instanceof
	typeof variable;             // devuelve "object"
	variable instanceof String;  // devuelve true

Funciones
	function namefunction(arguments) { ... }

	var fnc = function(arguments) { ... };

	var fnc = function namefunction(arguments) { ... };

		fnc() = namefunction() = dentro de la función emplear arguments.callee()

This

Argumentos
	var sum = function() {
	    var i, sum = 0;
	    for (i = 0; i < arguments.length; i += 1) {
	        sum += arguments[i];
	    }
	    return sum;
	};

	document.writeln(sum(4, 8, 15, 16, 23, 42)); // 108

Funciones como argumentos

Funciones anónimas

Funciones anónimas autoejecutables

	(function(){
	  var foo = 'Hola mundo';
	})();

Callbacks

	request = prepare_the_request();
	response = send_request_synchronously(request);
	display(response);
	
	El problema aquí, es que esperamos la respuesta del servidor, por lo que bloqueamos la ejecución del script hasta obtener una respuesta. Una estrategia mucho mejor es realizar una llamada asíncrona, proporcionando una función de respuesta (callback) que se ejecutará cuando la respuesta esté disponible:

	request = prepare_the_request();
	send_request_asynchronously(request, function (response) {
	    display(response);
	});

Expresiones regulares
	REGEXP = /EXPRESION/Flag

  	metodos
  		REGEXP.exec(STRING)		- Devuelve un array con las porciones del string 
  								que coinciden en formato con los grupos de la expresión regular
	  	REGEXP.test(STRING) 	- Devuelve true o false

	   	string.match(REGEXP) 	- Devuelve un arreglo con todas las coincidencias con la
	   							expresión regular
	   	string.replace(REGEXP | string_SEARCHVALUE, string_REPLACEVALUE)
	   							- Cambia todas las coincidencias con la expresión regular por el string de recambio
	   	string.searh(REGEXP)

	EXPRESION
		^A 	Debe empezar con "A"
	  	A$	Final de la entrada. Debe terminar con una "A"
	  	a?	Opcional. Puede o no llevar una "a"
	  	. 	Caracter comodin (cualquier caracter)

	  	|		Una de varias opciones [A-Z] | [0-9]   (A | Z)
	  	[ ]		Agrupa caracteres en grupos o clases de caracteres.
	  			Dentro de [] los caracteres ".+*"" dejan de ser caracteres especiales
	  	()		Parecido a []
	  	[]{n}	Lo anterior a {} se repite n veces [0-9]{3} Tres caracteres numericos
	  	[]{n,m} Se repite de n a m veces
	  	*		Se repite 0 o más veces {0,}
	  	+		Se repite 1 o más veces {1,}
	  	-		Para crear rangos [a-zA-ZñÑ]  [0-9]
	  	\		Para presentar caracteres especiales


			\t: representa un tabulador.
			\r: representa el "retorno de carro".
			\n: representa la "nueva línea".
			\e: representa la tecla "Esc" o "Escape".
			\d: = [0-9]{1} Representa un dígito del 0 al 9
			\w: representa cualquier carácter alfanumérico (incluidos los guiones bajos _).
			\s: representa un espacio en blanco (espacios en blanco / tabuladores / nuevas líneas).
				\D: representa cualquier carácter que no sea un dígito del 0 al 9.
				\W: representa cualquier carácter no alfanumérico.
				\S: representa cualquier carácter que no sea un espacio en blanco.
			\b: marca el inicio y el final de una palabra.

			  Flag
				g	Global (hace coincidir el patrón todas las veces posibles, aunque puede variar según el método).
				i	Insensitive (ignora las mayúsculas y minúsculas).
				m	Multiline (los caracteres ^ y $ pueden coincidir con caracteres multilínea).

	Si a un texto le paso una expresión regular, me devuelve un array con todas las coincidencias


Objetos
	var obj = new Object(); - No se usa
	var obj = {};
	var obj = {
		parametro : valor;
		.
		.
		.
	}						- Ojo con los : en lugar de =

	Pasar objetos literales como parámetros en lugar de parámetros sueltos

		domElement.fancybox({
		    maxWidth    : 800,
		    maxHeight   : 600,
		    fitToView   : false,
		    width       : '70%',
		    height      : '70%',
		    autoSize    : false,
		    closeClick  : false,
		    openEffect  : 'none',
		    closeEffect : 'none'
		});


	valores por defecto

	Paso por referencia

	Herencia

		- Al llamar a un metodo se busca primero en la instancia del objeto y si no lo tiene se le pregunta a su prototipo "prototype" (el objeto del que hereda)

borrar propiedades de un objeto
	delete property

Crear una clase no es más que definir una función. Por convenio se suele iniciar con mayúsculas.
	function Shape() {this.x=0;this.y=0}  	- Definición de una clase

	var shape = new Shape();				- Instancia de la clase Shape


funcionName.call(THIS,....)
funcionName.bind(THIS)(....);
funcionName.apply(THIS,...)
 		- Llama a una función cambiandole el contexto
		- Lo que se mande como THIS en estos llamados se convierten en el this de la función de destino
		- ... = parámetros de la función

backbone.js
		Para facilitar el manejo de clases, objetos


Arrays
	var arr = new Array();
	var emptyArr = [];
	 
	var numbersArr = ['zero', 'one', 'two', 'three', 'four','five', 'six', 'seven', 'eight', 'nine'];

	Propiedades
		length
	Metodos


